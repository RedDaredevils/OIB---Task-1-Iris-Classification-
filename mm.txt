# Load necessary libraries
library(class)

# Load Iris dataset
data(iris)

# Explore dataset structure
str(iris)

# Preprocessing (if necessary)
# No preprocessing is required for the Iris dataset

# Check for null values in a dataframe
null_values <- is.na(iris)

# Summarize null values by column
summary(null_values)

# Count null values by column
colSums(null_values)

# Calculate the counts and percentages of each species
species_counts <- table(iris$Species)
species_percentages <- prop.table(species_counts) * 100

# Create pie chart with percentages
pie(species_counts, labels = paste(names(species_counts), "\n", round(species_percentages, 2), "%", sep = ""), main = "Pie Chart of Species from Iris Dataset")

#Visualising the dataset
 barplot(species_counts,col=c(1,4,3))

# Sepal length vs Species
species_counts <- table(iris$Species)
 sepal_counts <- table(iris$Sepal.Length)
  barplot(species_counts,sepal_counts)

# Petal length vs Species
petal_counts <- table(iris$Petal.Length)
barplot(species_counts,petal_counts)

# Petal width vs Species
 petal_width <- table(iris$Petal.Width)
 barplot(species_counts,petal_width)

# Whole visualize of the dataset
pairs(iris[, 1:4], col = as.numeric(iris$Species), main = "Pair Plot of Iris Dataset by Species",
      pch = 19, labels = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width"))

# Split dataset into training and testing sets
set.seed(123)  # for reproducibility
train_indices <- sample(1:nrow(iris), 0.7 * nrow(iris))  # 70% training data
train_data <- iris[train_indices, ]
test_data <- iris[-train_indices, ]

# Train KNN classifier
k <- 5  # number of neighbors
classifier <- knn(train = train_data[, -5], test = test_data[, -5], cl = train_data[, 5], k = k)

# Evaluate classifier
accuracy <- sum(classifier == test_data$Species) / nrow(test_data)
cat("Accuracy:", accuracy*100, "\n")*100
accuracy

# Obtain names of all species predicted by the classifier
predicted_species <- levels(train_data$Species)[classifier]
cat("Predicted Species:", predicted_species, "\n")
